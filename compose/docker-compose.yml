# kitchen-hell
name: kh
services:
  api:
    image: kitchenhell-api
    build:
      context: ../
      dockerfile: ./src/KitchenHell.Api/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__Orders: Server=database;Initial Catalog=kh;User Id=kitchen;Password=OpenAI@2023;Persist Security Info=False;Encrypt=False;Connection Timeout=30;
      ConnectionStrings__Restaurants: Server=database;Initial Catalog=kh;User Id=kitchen;Password=OpenAI@2023;Persist Security Info=False;Encrypt=False;Connection Timeout=30;
      Messaging__Consumers__Settings__Kafka__BootstrapServers: "broker-n1:29091,broker-n2:29092"
      Messaging__Producers__Settings__Kafka__BootstrapServers: "broker-n1:29091,broker-n2:29092"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/healthz" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      database-gates:
        condition: service_completed_successfully
    ports:
      - 59081:58080 # grpc
      - 9081:8080   # http

  activity-generators:
    image: kitchenhell-activity-generators
    build:
      context: ../
      dockerfile: ./src/KitchenHell.ActivityGenerators/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      Clients__OrdersSvc__Address: http://api:58080
      Clients__RestaurantsSvc__Address: http://api:58080
    depends_on:
      api:
        condition: service_healthy

  database-dummy-data:
    image: mcr.microsoft.com/mssql-tools:latest
    command: ""
    entrypoint: /bin/bash -c "/tools/database-dummy-data.entrypoint.sh"
    environment:
      - MSSQL_SA_PASSWORD=Kitchen#2023
    volumes:
      - ./:/tools
    depends_on:
      database-gates:
        condition: service_completed_successfully
      api:
        condition: service_started

  database-gates:
    image: mcr.microsoft.com/mssql/server:2022-latest
    command: ""
    entrypoint: /bin/bash -c "/tools/gates.entrypoint.sh"
    environment:
      - MSSQL_SA_PASSWORD=Kitchen#2023
    volumes:
      - ./:/tools
    depends_on:
      - database

  database:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Kitchen#2023
    ports:
      - 2433:1433

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: "1"
      ZOOKEEPER_SERVERS: "zookeeper:2888:3888"
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_PEER_PORT: "2888"
      ZOOKEEPER_LEADER_PORT: "3888"
      ZOOKEEPER_INIT_LIMIT: "10"
      ZOOKEEPER_SYNC_LIMIT: "5"
      ZOOKEEPER_MAX_CLIENT_CONNS: "5"

  broker-n1: &broker-base
    image: confluentinc/cp-kafka:7.3.2
    ports:
      - "9091:9091"
    environment:
      KAFKA_BROKER_ID: "1"
      KAFKA_BROKER_RACK: "1"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INTERNAL://broker-n1:29091,LISTENER_LOCAL://localhost:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INTERNAL:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: "LISTENER_INTERNAL"
      KAFKA_DEFAULT_REPLICATION_FACTOR: "2"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "2"
      KSQL_KSQL_STREAMS_REPLICATION_FACTOR: "2"
      CONTROL_CENTER_REPLICATION_FACTOR: "2"
    depends_on:
      - zookeeper

  broker-n2:
    <<: *broker-base
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: "2"
      KAFKA_BROKER_RACK: "2"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INTERNAL://broker-n2:29092,LISTENER_LOCAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INTERNAL:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: "LISTENER_INTERNAL"
      KAFKA_DEFAULT_REPLICATION_FACTOR: "2"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "2"
      KSQL_KSQL_STREAMS_REPLICATION_FACTOR: "2"
      CONTROL_CENTER_REPLICATION_FACTOR: "2"
    depends_on:
      - zookeeper

  init-kafka:
    image: confluentinc/cp-kafka:7.3.2
    environment:
      BROKERS: "broker-n1:29091,broker-n2:29092"
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      set -x

      # blocks until kafka is reachable
      kafka-topics --bootstrap-server $${BROKERS} --list

      echo -e 'Creating/Updating kafka topics'
      kafka-topics --bootstrap-server $${BROKERS} --create --if-not-exists --replication-factor 2 --topic orders_status_updates
      kafka-topics --bootstrap-server $${BROKERS} --create --if-not-exists --replication-factor 2 --topic orders_created
      kafka-topics --bootstrap-server $${BROKERS} --create --if-not-exists --replication-factor 2 --topic orders_restaurant_status_updates

      kafka-topics --bootstrap-server $${BROKERS} --alter --partitions 2 --topic orders_status_updates
      kafka-topics --bootstrap-server $${BROKERS} --alter --partitions 2 --topic orders_created
      kafka-topics --bootstrap-server $${BROKERS} --alter --partitions 2 --topic orders_restaurant_status_updates

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server $${BROKERS} --list
      "
    depends_on:
      - broker-n1
      - broker-n2

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8092:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: "kafka-brokers"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "broker-n1:29091,broker-n2:29092"
      AUTH_TYPE: "DISABLED"
      MANAGEMENT_HEALTH_LDAP_ENABLED: "FALSE"
      DYNAMIC_CONFIG_ENABLED: 'true'
