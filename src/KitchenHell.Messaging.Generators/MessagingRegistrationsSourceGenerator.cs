using System.Text;
using KitchenHell.Messaging.Generators.Receivers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace KitchenHell.Messaging.Generators;

// Bug [2023-12-21 klappo] it doesn't recognizes types out of target assembly
// Bug [2023-12-21 klappo] IMessageHandler<string, global::KitchenHell.Business.Messages.OrderRestaurantStatusUpdatedMessage>
// Bug [2023-12-21 klappo] IMessageHandler
// Bug [2023-12-21 klappo] ErrorType
// Bug [2023-12-21 klappo] =====
// Bug [2023-12-21 klappo] no information about interface!
[Generator]
public class MessagingRegistrationsSourceGenerator : ISourceGenerator

//, IIncrementalGenerator
{
    private static readonly DiagnosticDescriptor NotClassReciever = new("MG001",
        "NotClassReciever",
        "NotClassReciever",
        nameof(MessagingRegistrationsSourceGenerator),
        DiagnosticSeverity.Warning,
        true);

    private static readonly DiagnosticDescriptor NoClassFound = new("MG002",
        "NoClassFound",
        "NoClassFound",
        nameof(MessagingRegistrationsSourceGenerator),
        DiagnosticSeverity.Warning,
        true);

    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() =>
            new ClassesWithInterfacesReceiver("IMessageHandler"));
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var compilation = context.Compilation;
        var assembly = compilation.Assembly;
        var rootNamespace = assembly.Name;
        var targetDisplayName = assembly.Name.Replace(".", "");

        var sb = new SourceStringBuilder();

        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using KitchenHell.Messaging.Kafka;");
        sb.AppendLine();

        sb.AppendFormatLine("namespace {0};", rootNamespace);
        sb.AppendLine();

        sb.AppendFormatLine("public static class {0}MessagingRegistrations", targetDisplayName);
        sb.AppendLine("{");

        using (sb.StartNestedScope())
        {
            sb.AppendLine("/// <summary>");
            sb.AppendFormatLine(
                "/// Registers all messaging related handlers and consumers in {0} project.",
                assembly.Name);

            sb.AppendLine("/// <br/>");
            sb.AppendFormatLine("/// Generated: {0}", DateTime.UtcNow.ToString("u"));
            sb.AppendLine("/// </summary>");
            sb.AppendFormatLine("public static IServiceCollection Add{0}Messaging(this IServiceCollection services)",
                targetDisplayName);

            sb.AppendLine("{");

            using (sb.StartNestedScope())
            {
                GenerateRegistrations(context, sb);
                sb.AppendLine();
                sb.AppendLine("return services;");
            }

            sb.AppendLine("}");
        }

        sb.AppendLine("}");

        var sourceTextContent = sb.ToString();

        var sourceText = SourceText.From(sourceTextContent, Encoding.UTF8);
        var fileName = $"Messaging.{targetDisplayName}.g.cs";
        context.AddSource(fileName, sourceText);
    }

    private void GenerateRegistrations(GeneratorExecutionContext context, SourceStringBuilder sb)
    {
        if (context.SyntaxContextReceiver is not ClassesWithInterfacesReceiver receiver)
        {
            context.ReportDiagnostic(Diagnostic.Create(NotClassReciever, Location.None, "some path"));

            return;
        }

        var handlerClasses = receiver.Classes;
        if (handlerClasses is not { Count: > 0, })
        {
            context.ReportDiagnostic(Diagnostic.Create(NoClassFound, Location.None, "some path"));

            return;
        }

        foreach (var handlerClass in handlerClasses)
        {
            var handlerInterface = handlerClass.Interfaces
                .Append(handlerClass.BaseType)
                .Where(i => i != null)
                .FirstOrDefault(i => i.Name.StartsWith("IMessageHandler"));

            if (handlerInterface == default)
            {
                sb.AppendLine("// No interace");

                continue;
            }

            var keyTypeArg = handlerInterface.TypeArguments[0];
            var valueTypeArg = handlerInterface.TypeArguments[1];
            var configName = valueTypeArg.Name.TrimEnd("Message");

            sb.AppendFormatLine("services.AddKafkaJsonConsumer<{0}, {1}>(\"{2}\")",
                keyTypeArg.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat),
                valueTypeArg.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat),
                configName);

            using (sb.StartNestedScope())
            {
                sb.AppendFormatLine(".AddHandler<{0}>();",
                    handlerClass.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat));
            }

            sb.AppendLine();
        }

        WriteDebugInfo(sb, handlerClasses);
    }

    private static void WriteDebugInfo(SourceStringBuilder sb, List<INamedTypeSymbol> handlerClasses)
    {
        foreach (var handlerClass in handlerClasses)
        {
            sb.AppendLine("/*");
            sb.AppendLine(handlerClass.Name);
            sb.AppendLine(handlerClass.ToDisplayString());
            sb.AppendLine(handlerClass.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat));
            sb.AppendLine(
                handlerClass.ContainingNamespace.ToDisplayString(SymbolDisplayFormat.CSharpErrorMessageFormat));

            sb.AppendLine(handlerClass.BaseType?.ToDisplayString());
            sb.AppendLine(handlerClass.BaseType?.Kind.ToString());
            using (sb.StartNestedScope())
            {
                foreach (var iInterface in handlerClass.Interfaces
                             .Append(handlerClass.BaseType)
                             .Where(i => i != null)
                        )
                {
                    sb.AppendLine(iInterface.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat));
                    sb.AppendLine(iInterface.Name);
                    sb.AppendLine(iInterface.Kind.ToString());
                    sb.AppendLine(
                        "TypeArguments: " +
                        string.Join(";",
                            iInterface.TypeArguments.Select(t =>
                                t.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat))));

                    sb.AppendLine();
                }
            }

            sb.AppendLine("*/");
            sb.AppendLine();
        }
    }
}
